name: Build & Release to Docker Hub

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag de versión (ej: v0.1.0)"
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE: docker.io/nikoquin/todoapp
      GIT_SHA: ${{ github.sha }}
      VERSION: ${{ github.ref_type == 'tag' && github.ref_name || inputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar VERSION
        if: ${{ env.VERSION == '' }}
        run: |
          echo "No se pudo resolver VERSION. Si ejecutas manual, pasa 'tag' (ej: v0.1.0)."
          exit 1

      - name: Run tests with Docker Compose
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from app-tests
          docker compose -f docker-compose.test.yml down -v

      - name: Derivar tags (semver y sha)
        id: meta
        run: |
          CLEAN="${VERSION#v}"
          MAJOR="$(echo "$CLEAN" | cut -d. -f1)"
          MINOR="$(echo "$CLEAN" | cut -d. -f2)"
          SHA7="${GIT_SHA::7}"
          echo "clean=$CLEAN" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "sha7=$SHA7" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build image
        run: |
          docker build \
            --label org.opencontainers.image.source=${{ github.repositoryUrl }} \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            --label org.opencontainers.image.version=${{ steps.meta.outputs.clean }} \
            -t $IMAGE:${VERSION} \
            -t $IMAGE:${{ steps.meta.outputs.clean }} \
            -t $IMAGE:${{ steps.meta.outputs.major }}.${{ steps.meta.outputs.minor }} \
            -t $IMAGE:${{ steps.meta.outputs.major }} \
            -t $IMAGE:latest \
            -t $IMAGE:sha-${{ steps.meta.outputs.sha7 }} \
            .

      - name: Push all tags
        run: docker push $IMAGE --all-tags

      # ← ← Guardar la imagen como .tar.gz (artifact)
      - name: Export image as artifact (tar.gz)
        run: |
          mkdir -p artifacts
          docker save $IMAGE:${{ steps.meta.outputs.clean }} | gzip > artifacts/todoapp-${{ steps.meta.outputs.clean }}.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.meta.outputs.clean }}
          path: artifacts/todoapp-${{ steps.meta.outputs.clean }}.tar.gz
          retention-days: 7
